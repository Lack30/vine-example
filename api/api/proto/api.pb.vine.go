// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/lack-io/vine-example/api/api/proto/api.proto

package api

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	api1 "github.com/lack-io/vine/proto/api"
	math "math"
)

import (
	context "context"
	api "github.com/lack-io/vine/service/api"
	client "github.com/lack-io/vine/service/client"
	server "github.com/lack-io/vine/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Example service
func NewExampleEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Example service
type ExampleService interface {
	Call(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
}

type exampleService struct {
	c    client.Client
	name string
}

func NewExampleService(name string, c client.Client) ExampleService {
	return &exampleService{
		c:    c,
		name: name,
	}
}

func (c *exampleService) Call(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Example.Call", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Example service
type ExampleHandler interface {
	Call(context.Context, *api1.Request, *api1.Response) error
}

func RegisterExampleHandler(s server.Server, hdlr ExampleHandler, opts ...server.HandlerOption) error {
	type exampleImpl interface {
		Call(ctx context.Context, in *api1.Request, out *api1.Response) error
	}
	type Example struct {
		exampleImpl
	}
	h := &exampleHandler{hdlr}
	return s.Handle(s.NewHandler(&Example{h}, opts...))
}

type exampleHandler struct {
	ExampleHandler
}

func (h *exampleHandler) Call(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.ExampleHandler.Call(ctx, in, out)
}

// Api Endpoints for Foo service
func NewFooEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Foo service
type FooService interface {
	Bar(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
}

type fooService struct {
	c    client.Client
	name string
}

func NewFooService(name string, c client.Client) FooService {
	return &fooService{
		c:    c,
		name: name,
	}
}

func (c *fooService) Bar(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Foo.Bar", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Foo service
type FooHandler interface {
	Bar(context.Context, *api1.Request, *api1.Response) error
}

func RegisterFooHandler(s server.Server, hdlr FooHandler, opts ...server.HandlerOption) error {
	type fooImpl interface {
		Bar(ctx context.Context, in *api1.Request, out *api1.Response) error
	}
	type Foo struct {
		fooImpl
	}
	h := &fooHandler{hdlr}
	return s.Handle(s.NewHandler(&Foo{h}, opts...))
}

type fooHandler struct {
	FooHandler
}

func (h *fooHandler) Bar(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.FooHandler.Bar(ctx, in, out)
}
