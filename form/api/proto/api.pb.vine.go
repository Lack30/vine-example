// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/lack-io/vine-example/form/api/proto/api.proto

package api

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	api1 "github.com/lack-io/vine/proto/api"
	math "math"
)

import (
	context "context"
	api "github.com/lack-io/vine/service/api"
	client "github.com/lack-io/vine/service/client"
	server "github.com/lack-io/vine/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Form service
func NewFormEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Form service
type FormService interface {
	// regular form
	Submit(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	// multipart form
	Multipart(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
}

type formService struct {
	c    client.Client
	name string
}

func NewFormService(name string, c client.Client) FormService {
	return &formService{
		c:    c,
		name: name,
	}
}

func (c *formService) Submit(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Form.Submit", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formService) Multipart(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Form.Multipart", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Form service
type FormHandler interface {
	// regular form
	Submit(context.Context, *api1.Request, *api1.Response) error
	// multipart form
	Multipart(context.Context, *api1.Request, *api1.Response) error
}

func RegisterFormHandler(s server.Server, hdlr FormHandler, opts ...server.HandlerOption) error {
	type formImpl interface {
		Submit(ctx context.Context, in *api1.Request, out *api1.Response) error
		Multipart(ctx context.Context, in *api1.Request, out *api1.Response) error
	}
	type Form struct {
		formImpl
	}
	h := &formHandler{hdlr}
	return s.Handle(s.NewHandler(&Form{h}, opts...))
}

type formHandler struct {
	FormHandler
}

func (h *formHandler) Submit(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.FormHandler.Submit(ctx, in, out)
}

func (h *formHandler) Multipart(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.FormHandler.Multipart(ctx, in, out)
}
