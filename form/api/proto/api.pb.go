// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/lack-io/vine-example/form/api/proto/api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	api "github.com/lack-io/vine/proto/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/lack-io/vine-example/form/api/proto/api.proto", fileDescriptor_65e5ab5a8ef6b533)
}

var fileDescriptor_65e5ab5a8ef6b533 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x49, 0x4c, 0xce, 0xd6, 0xcd, 0xcc, 0xd7, 0x2f,
	0xcb, 0xcc, 0x4b, 0xd5, 0x4d, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x4f, 0xcb, 0x2f, 0xca,
	0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x07, 0xb1, 0xf4, 0xc0, 0x2c, 0x29,
	0x6d, 0x1c, 0x3a, 0x11, 0x0a, 0x11, 0x8a, 0x8d, 0xa2, 0xb9, 0x58, 0xdc, 0xf2, 0x8b, 0x72, 0x85,
	0xd4, 0xb9, 0xd8, 0x82, 0x4b, 0x93, 0x72, 0x33, 0x4b, 0x84, 0x78, 0xf4, 0x40, 0xb2, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0xbc, 0x50, 0x5e, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x12,
	0x83, 0x90, 0x16, 0x17, 0xa7, 0x6f, 0x69, 0x4e, 0x49, 0x66, 0x41, 0x62, 0x11, 0x21, 0xb5, 0x4e,
	0x12, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7,
	0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x90, 0xc4, 0x06, 0xb6, 0xdd, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x64, 0x56, 0x5a, 0xe6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FormClient is the client API for Form service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FormClient interface {
	// regular form
	Submit(ctx context.Context, in *api.Request, opts ...grpc.CallOption) (*api.Response, error)
	// multipart form
	Multipart(ctx context.Context, in *api.Request, opts ...grpc.CallOption) (*api.Response, error)
}

type formClient struct {
	cc *grpc.ClientConn
}

func NewFormClient(cc *grpc.ClientConn) FormClient {
	return &formClient{cc}
}

func (c *formClient) Submit(ctx context.Context, in *api.Request, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, "/Form/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formClient) Multipart(ctx context.Context, in *api.Request, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, "/Form/Multipart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormServer is the server API for Form service.
type FormServer interface {
	// regular form
	Submit(context.Context, *api.Request) (*api.Response, error)
	// multipart form
	Multipart(context.Context, *api.Request) (*api.Response, error)
}

// UnimplementedFormServer can be embedded to have forward compatible implementations.
type UnimplementedFormServer struct {
}

func (*UnimplementedFormServer) Submit(ctx context.Context, req *api.Request) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (*UnimplementedFormServer) Multipart(ctx context.Context, req *api.Request) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multipart not implemented")
}

func RegisterFormServer(s *grpc.Server, srv FormServer) {
	s.RegisterService(&_Form_serviceDesc, srv)
}

func _Form_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Form/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).Submit(ctx, req.(*api.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Form_Multipart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServer).Multipart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Form/Multipart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServer).Multipart(ctx, req.(*api.Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Form_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Form",
	HandlerType: (*FormServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _Form_Submit_Handler,
		},
		{
			MethodName: "Multipart",
			Handler:    _Form_Multipart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/lack-io/vine-example/form/api/proto/api.proto",
}
